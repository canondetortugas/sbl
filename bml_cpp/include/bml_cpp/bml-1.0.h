// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CXX_HOME_NALYD_ROS_WORKSPACE_SBL_BML_CPP_XSD_BML_1_0_H
#define CXX_HOME_NALYD_ROS_WORKSPACE_SBL_BML_CPP_XSD_BML_1_0_H

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3030000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  // Namespace information and list stream. Used in
  // serialization functions.
  //
  typedef ::xsd::cxx::xml::dom::namespace_info< char > namespace_info;
  typedef ::xsd::cxx::xml::dom::namespace_infomap< char > namespace_infomap;
  typedef ::xsd::cxx::tree::list_stream< char > list_stream;
  typedef ::xsd::cxx::tree::as_double< double_ > as_double;
  typedef ::xsd::cxx::tree::as_decimal< decimal > as_decimal;
  typedef ::xsd::cxx::tree::facet facet;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::serialization< char > serialization;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace bml
{
  class requiredType;
  class behaviorType;
  class constraintType;
  class synchronizeType;
  class beforeType;
  class afterType;
  class syncRefType;
  class waitType;
  class gazeType;
  class gestureType;
  class syncType;
  class textType;
  class speech;
  class postureType;
  class faceAbstractType;
  class faceLexemeType;
  class syncBlock;
  class targetID;
  class id;
  class openSetItem;
  class closedSetItem;
  class pointingType;
  class locomotionType;
  class headDirectionShiftType;
  class faceFacs;
  class faceType;
  class faceShiftType;
  class lexemeType;
  class headType;
  class stanceType;
  class poseType;
  class bml;
}


#include <memory>    // std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

namespace bml
{
  class requiredType: public ::xml_schema::type
  {
    public:
    // constraint
    // 
    typedef ::bml::constraintType constraint_type;
    typedef ::xsd::cxx::tree::sequence< constraint_type > constraint_sequence;
    typedef constraint_sequence::iterator constraint_iterator;
    typedef constraint_sequence::const_iterator constraint_const_iterator;
    typedef ::xsd::cxx::tree::traits< constraint_type, char > constraint_traits;

    const constraint_sequence&
    constraint () const;

    constraint_sequence&
    constraint ();

    void
    constraint (const constraint_sequence& s);

    // gaze
    // 
    typedef ::bml::gazeType gaze_type;
    typedef ::xsd::cxx::tree::sequence< gaze_type > gaze_sequence;
    typedef gaze_sequence::iterator gaze_iterator;
    typedef gaze_sequence::const_iterator gaze_const_iterator;
    typedef ::xsd::cxx::tree::traits< gaze_type, char > gaze_traits;

    const gaze_sequence&
    gaze () const;

    gaze_sequence&
    gaze ();

    void
    gaze (const gaze_sequence& s);

    // wait
    // 
    typedef ::bml::waitType wait_type;
    typedef ::xsd::cxx::tree::sequence< wait_type > wait_sequence;
    typedef wait_sequence::iterator wait_iterator;
    typedef wait_sequence::const_iterator wait_const_iterator;
    typedef ::xsd::cxx::tree::traits< wait_type, char > wait_traits;

    const wait_sequence&
    wait () const;

    wait_sequence&
    wait ();

    void
    wait (const wait_sequence& s);

    // headOrientation
    // 
    typedef ::xml_schema::string headOrientation_type;
    typedef ::xsd::cxx::tree::sequence< headOrientation_type > headOrientation_sequence;
    typedef headOrientation_sequence::iterator headOrientation_iterator;
    typedef headOrientation_sequence::const_iterator headOrientation_const_iterator;
    typedef ::xsd::cxx::tree::traits< headOrientation_type, char > headOrientation_traits;

    const headOrientation_sequence&
    headOrientation () const;

    headOrientation_sequence&
    headOrientation ();

    void
    headOrientation (const headOrientation_sequence& s);

    // posture
    // 
    typedef ::bml::postureType posture_type;
    typedef ::xsd::cxx::tree::sequence< posture_type > posture_sequence;
    typedef posture_sequence::iterator posture_iterator;
    typedef posture_sequence::const_iterator posture_const_iterator;
    typedef ::xsd::cxx::tree::traits< posture_type, char > posture_traits;

    const posture_sequence&
    posture () const;

    posture_sequence&
    posture ();

    void
    posture (const posture_sequence& s);

    // postureShift
    // 
    typedef ::bml::postureType postureShift_type;
    typedef ::xsd::cxx::tree::sequence< postureShift_type > postureShift_sequence;
    typedef postureShift_sequence::iterator postureShift_iterator;
    typedef postureShift_sequence::const_iterator postureShift_const_iterator;
    typedef ::xsd::cxx::tree::traits< postureShift_type, char > postureShift_traits;

    const postureShift_sequence&
    postureShift () const;

    postureShift_sequence&
    postureShift ();

    void
    postureShift (const postureShift_sequence& s);

    // speech
    // 
    typedef ::bml::speech speech_type;
    typedef ::xsd::cxx::tree::sequence< speech_type > speech_sequence;
    typedef speech_sequence::iterator speech_iterator;
    typedef speech_sequence::const_iterator speech_const_iterator;
    typedef ::xsd::cxx::tree::traits< speech_type, char > speech_traits;

    const speech_sequence&
    speech () const;

    speech_sequence&
    speech ();

    void
    speech (const speech_sequence& s);

    // gesture
    // 
    typedef ::bml::gestureType gesture_type;
    typedef ::xsd::cxx::tree::sequence< gesture_type > gesture_sequence;
    typedef gesture_sequence::iterator gesture_iterator;
    typedef gesture_sequence::const_iterator gesture_const_iterator;
    typedef ::xsd::cxx::tree::traits< gesture_type, char > gesture_traits;

    const gesture_sequence&
    gesture () const;

    gesture_sequence&
    gesture ();

    void
    gesture (const gesture_sequence& s);

    // pointing
    // 
    typedef ::bml::pointingType pointing_type;
    typedef ::xsd::cxx::tree::sequence< pointing_type > pointing_sequence;
    typedef pointing_sequence::iterator pointing_iterator;
    typedef pointing_sequence::const_iterator pointing_const_iterator;
    typedef ::xsd::cxx::tree::traits< pointing_type, char > pointing_traits;

    const pointing_sequence&
    pointing () const;

    pointing_sequence&
    pointing ();

    void
    pointing (const pointing_sequence& s);

    // face
    // 
    typedef ::bml::faceAbstractType face_type;
    typedef ::xsd::cxx::tree::sequence< face_type > face_sequence;
    typedef face_sequence::iterator face_iterator;
    typedef face_sequence::const_iterator face_const_iterator;
    typedef ::xsd::cxx::tree::traits< face_type, char > face_traits;

    const face_sequence&
    face () const;

    face_sequence&
    face ();

    void
    face (const face_sequence& s);

    // faceLexeme
    // 
    typedef ::bml::faceLexemeType faceLexeme_type;
    typedef ::xsd::cxx::tree::sequence< faceLexeme_type > faceLexeme_sequence;
    typedef faceLexeme_sequence::iterator faceLexeme_iterator;
    typedef faceLexeme_sequence::const_iterator faceLexeme_const_iterator;
    typedef ::xsd::cxx::tree::traits< faceLexeme_type, char > faceLexeme_traits;

    const faceLexeme_sequence&
    faceLexeme () const;

    faceLexeme_sequence&
    faceLexeme ();

    void
    faceLexeme (const faceLexeme_sequence& s);

    // locomotion
    // 
    typedef ::bml::locomotionType locomotion_type;
    typedef ::xsd::cxx::tree::sequence< locomotion_type > locomotion_sequence;
    typedef locomotion_sequence::iterator locomotion_iterator;
    typedef locomotion_sequence::const_iterator locomotion_const_iterator;
    typedef ::xsd::cxx::tree::traits< locomotion_type, char > locomotion_traits;

    const locomotion_sequence&
    locomotion () const;

    locomotion_sequence&
    locomotion ();

    void
    locomotion (const locomotion_sequence& s);

    // head
    // 
    typedef ::bml::headType head_type;
    typedef ::xsd::cxx::tree::sequence< head_type > head_sequence;
    typedef head_sequence::iterator head_iterator;
    typedef head_sequence::const_iterator head_const_iterator;
    typedef ::xsd::cxx::tree::traits< head_type, char > head_traits;

    const head_sequence&
    head () const;

    head_sequence&
    head ();

    void
    head (const head_sequence& s);

    // headDirectionShift
    // 
    typedef ::bml::headDirectionShiftType headDirectionShift_type;
    typedef ::xsd::cxx::tree::sequence< headDirectionShift_type > headDirectionShift_sequence;
    typedef headDirectionShift_sequence::iterator headDirectionShift_iterator;
    typedef headDirectionShift_sequence::const_iterator headDirectionShift_const_iterator;
    typedef ::xsd::cxx::tree::traits< headDirectionShift_type, char > headDirectionShift_traits;

    const headDirectionShift_sequence&
    headDirectionShift () const;

    headDirectionShift_sequence&
    headDirectionShift ();

    void
    headDirectionShift (const headDirectionShift_sequence& s);

    // Constructors.
    //
    requiredType ();

    requiredType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    requiredType (const requiredType& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    virtual requiredType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~requiredType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    constraint_sequence constraint_;
    gaze_sequence gaze_;
    wait_sequence wait_;
    headOrientation_sequence headOrientation_;
    posture_sequence posture_;
    postureShift_sequence postureShift_;
    speech_sequence speech_;
    gesture_sequence gesture_;
    pointing_sequence pointing_;
    face_sequence face_;
    faceLexeme_sequence faceLexeme_;
    locomotion_sequence locomotion_;
    head_sequence head_;
    headDirectionShift_sequence headDirectionShift_;
  };

  class behaviorType: public ::xml_schema::type
  {
    public:
    // id
    // 
    typedef ::xml_schema::string id_type;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_type&
    id () const;

    id_type&
    id ();

    void
    id (const id_type& x);

    void
    id (::std::auto_ptr< id_type > p);

    // start
    // 
    typedef ::xml_schema::string start_type;
    typedef ::xsd::cxx::tree::optional< start_type > start_optional;
    typedef ::xsd::cxx::tree::traits< start_type, char > start_traits;

    const start_optional&
    start () const;

    start_optional&
    start ();

    void
    start (const start_type& x);

    void
    start (const start_optional& x);

    void
    start (::std::auto_ptr< start_type > p);

    // end
    // 
    typedef ::xml_schema::string end_type;
    typedef ::xsd::cxx::tree::optional< end_type > end_optional;
    typedef ::xsd::cxx::tree::traits< end_type, char > end_traits;

    const end_optional&
    end () const;

    end_optional&
    end ();

    void
    end (const end_type& x);

    void
    end (const end_optional& x);

    void
    end (::std::auto_ptr< end_type > p);

    // Constructors.
    //
    behaviorType (const id_type&);

    behaviorType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    behaviorType (const behaviorType& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    virtual behaviorType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~behaviorType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< id_type > id_;
    start_optional start_;
    end_optional end_;
  };

  class constraintType: public ::xml_schema::type
  {
    public:
    // synchronize
    // 
    typedef ::bml::synchronizeType synchronize_type;
    typedef ::xsd::cxx::tree::optional< synchronize_type > synchronize_optional;
    typedef ::xsd::cxx::tree::traits< synchronize_type, char > synchronize_traits;

    const synchronize_optional&
    synchronize () const;

    synchronize_optional&
    synchronize ();

    void
    synchronize (const synchronize_type& x);

    void
    synchronize (const synchronize_optional& x);

    void
    synchronize (::std::auto_ptr< synchronize_type > p);

    // before
    // 
    typedef ::bml::beforeType before_type;
    typedef ::xsd::cxx::tree::optional< before_type > before_optional;
    typedef ::xsd::cxx::tree::traits< before_type, char > before_traits;

    const before_optional&
    before () const;

    before_optional&
    before ();

    void
    before (const before_type& x);

    void
    before (const before_optional& x);

    void
    before (::std::auto_ptr< before_type > p);

    // after
    // 
    typedef ::bml::afterType after_type;
    typedef ::xsd::cxx::tree::optional< after_type > after_optional;
    typedef ::xsd::cxx::tree::traits< after_type, char > after_traits;

    const after_optional&
    after () const;

    after_optional&
    after ();

    void
    after (const after_type& x);

    void
    after (const after_optional& x);

    void
    after (::std::auto_ptr< after_type > p);

    // Constructors.
    //
    constraintType ();

    constraintType (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    constraintType (const constraintType& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    virtual constraintType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~constraintType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    synchronize_optional synchronize_;
    before_optional before_;
    after_optional after_;
  };

  class synchronizeType: public ::xml_schema::type
  {
    public:
    // sync
    // 
    typedef ::bml::syncRefType sync_type;
    typedef ::xsd::cxx::tree::sequence< sync_type > sync_sequence;
    typedef sync_sequence::iterator sync_iterator;
    typedef sync_sequence::const_iterator sync_const_iterator;
    typedef ::xsd::cxx::tree::traits< sync_type, char > sync_traits;

    const sync_sequence&
    sync () const;

    sync_sequence&
    sync ();

    void
    sync (const sync_sequence& s);

    // Constructors.
    //
    synchronizeType ();

    synchronizeType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    synchronizeType (const synchronizeType& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    virtual synchronizeType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~synchronizeType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    sync_sequence sync_;
  };

  class beforeType: public ::bml::synchronizeType
  {
    public:
    // ref
    // 
    typedef ::xml_schema::string ref_type;
    typedef ::xsd::cxx::tree::optional< ref_type > ref_optional;
    typedef ::xsd::cxx::tree::traits< ref_type, char > ref_traits;

    const ref_optional&
    ref () const;

    ref_optional&
    ref ();

    void
    ref (const ref_type& x);

    void
    ref (const ref_optional& x);

    void
    ref (::std::auto_ptr< ref_type > p);

    // Constructors.
    //
    beforeType ();

    beforeType (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    beforeType (const beforeType& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual beforeType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~beforeType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ref_optional ref_;
  };

  class afterType: public ::bml::synchronizeType
  {
    public:
    // ref
    // 
    typedef ::xml_schema::string ref_type;
    typedef ::xsd::cxx::tree::optional< ref_type > ref_optional;
    typedef ::xsd::cxx::tree::traits< ref_type, char > ref_traits;

    const ref_optional&
    ref () const;

    ref_optional&
    ref ();

    void
    ref (const ref_type& x);

    void
    ref (const ref_optional& x);

    void
    ref (::std::auto_ptr< ref_type > p);

    // Constructors.
    //
    afterType ();

    afterType (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    afterType (const afterType& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual afterType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~afterType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ref_optional ref_;
  };

  class syncRefType: public ::xml_schema::type
  {
    public:
    // ref
    // 
    typedef ::xml_schema::string ref_type;
    typedef ::xsd::cxx::tree::optional< ref_type > ref_optional;
    typedef ::xsd::cxx::tree::traits< ref_type, char > ref_traits;

    const ref_optional&
    ref () const;

    ref_optional&
    ref ();

    void
    ref (const ref_type& x);

    void
    ref (const ref_optional& x);

    void
    ref (::std::auto_ptr< ref_type > p);

    // Constructors.
    //
    syncRefType ();

    syncRefType (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    syncRefType (const syncRefType& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual syncRefType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~syncRefType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ref_optional ref_;
  };

  class waitType: public ::bml::behaviorType
  {
    public:
    // duration
    // 
    typedef ::xml_schema::float_ duration_type;
    typedef ::xsd::cxx::tree::optional< duration_type > duration_optional;
    typedef ::xsd::cxx::tree::traits< duration_type, char > duration_traits;

    const duration_optional&
    duration () const;

    duration_optional&
    duration ();

    void
    duration (const duration_type& x);

    void
    duration (const duration_optional& x);

    // Constructors.
    //
    waitType (const id_type&);

    waitType (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    waitType (const waitType& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual waitType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~waitType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    duration_optional duration_;
  };

  class gazeType: public ::bml::behaviorType
  {
    public:
    // target
    // 
    typedef ::xml_schema::string target_type;
    typedef ::xsd::cxx::tree::optional< target_type > target_optional;
    typedef ::xsd::cxx::tree::traits< target_type, char > target_traits;

    const target_optional&
    target () const;

    target_optional&
    target ();

    void
    target (const target_type& x);

    void
    target (const target_optional& x);

    void
    target (::std::auto_ptr< target_type > p);

    // influence
    // 
    typedef ::bml::closedSetItem influence_type;
    typedef ::xsd::cxx::tree::optional< influence_type > influence_optional;
    typedef ::xsd::cxx::tree::traits< influence_type, char > influence_traits;

    const influence_optional&
    influence () const;

    influence_optional&
    influence ();

    void
    influence (const influence_type& x);

    void
    influence (const influence_optional& x);

    void
    influence (::std::auto_ptr< influence_type > p);

    // ready
    // 
    typedef ::xml_schema::string ready_type;
    typedef ::xsd::cxx::tree::optional< ready_type > ready_optional;
    typedef ::xsd::cxx::tree::traits< ready_type, char > ready_traits;

    const ready_optional&
    ready () const;

    ready_optional&
    ready ();

    void
    ready (const ready_type& x);

    void
    ready (const ready_optional& x);

    void
    ready (::std::auto_ptr< ready_type > p);

    // relax
    // 
    typedef ::xml_schema::string relax_type;
    typedef ::xsd::cxx::tree::optional< relax_type > relax_optional;
    typedef ::xsd::cxx::tree::traits< relax_type, char > relax_traits;

    const relax_optional&
    relax () const;

    relax_optional&
    relax ();

    void
    relax (const relax_type& x);

    void
    relax (const relax_optional& x);

    void
    relax (::std::auto_ptr< relax_type > p);

    // offsetAngle
    // 
    typedef ::xml_schema::float_ offsetAngle_type;
    typedef ::xsd::cxx::tree::optional< offsetAngle_type > offsetAngle_optional;
    typedef ::xsd::cxx::tree::traits< offsetAngle_type, char > offsetAngle_traits;

    const offsetAngle_optional&
    offsetAngle () const;

    offsetAngle_optional&
    offsetAngle ();

    void
    offsetAngle (const offsetAngle_type& x);

    void
    offsetAngle (const offsetAngle_optional& x);

    // offsetDirection
    // 
    typedef ::bml::closedSetItem offsetDirection_type;
    typedef ::xsd::cxx::tree::optional< offsetDirection_type > offsetDirection_optional;
    typedef ::xsd::cxx::tree::traits< offsetDirection_type, char > offsetDirection_traits;

    const offsetDirection_optional&
    offsetDirection () const;

    offsetDirection_optional&
    offsetDirection ();

    void
    offsetDirection (const offsetDirection_type& x);

    void
    offsetDirection (const offsetDirection_optional& x);

    void
    offsetDirection (::std::auto_ptr< offsetDirection_type > p);

    // Constructors.
    //
    gazeType (const id_type&);

    gazeType (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    gazeType (const gazeType& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual gazeType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~gazeType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    target_optional target_;
    influence_optional influence_;
    ready_optional ready_;
    relax_optional relax_;
    offsetAngle_optional offsetAngle_;
    offsetDirection_optional offsetDirection_;
  };

  class gestureType: public ::bml::behaviorType
  {
    public:
    // lexeme
    // 
    typedef ::bml::openSetItem lexeme_type;
    typedef ::xsd::cxx::tree::optional< lexeme_type > lexeme_optional;
    typedef ::xsd::cxx::tree::traits< lexeme_type, char > lexeme_traits;

    const lexeme_optional&
    lexeme () const;

    lexeme_optional&
    lexeme ();

    void
    lexeme (const lexeme_type& x);

    void
    lexeme (const lexeme_optional& x);

    void
    lexeme (::std::auto_ptr< lexeme_type > p);

    // mode
    // 
    typedef ::bml::closedSetItem mode_type;
    typedef ::xsd::cxx::tree::optional< mode_type > mode_optional;
    typedef ::xsd::cxx::tree::traits< mode_type, char > mode_traits;

    const mode_optional&
    mode () const;

    mode_optional&
    mode ();

    void
    mode (const mode_type& x);

    void
    mode (const mode_optional& x);

    void
    mode (::std::auto_ptr< mode_type > p);

    // strokeStart
    // 
    typedef ::xml_schema::string strokeStart_type;
    typedef ::xsd::cxx::tree::optional< strokeStart_type > strokeStart_optional;
    typedef ::xsd::cxx::tree::traits< strokeStart_type, char > strokeStart_traits;

    const strokeStart_optional&
    strokeStart () const;

    strokeStart_optional&
    strokeStart ();

    void
    strokeStart (const strokeStart_type& x);

    void
    strokeStart (const strokeStart_optional& x);

    void
    strokeStart (::std::auto_ptr< strokeStart_type > p);

    // stroke
    // 
    typedef ::xml_schema::string stroke_type;
    typedef ::xsd::cxx::tree::optional< stroke_type > stroke_optional;
    typedef ::xsd::cxx::tree::traits< stroke_type, char > stroke_traits;

    const stroke_optional&
    stroke () const;

    stroke_optional&
    stroke ();

    void
    stroke (const stroke_type& x);

    void
    stroke (const stroke_optional& x);

    void
    stroke (::std::auto_ptr< stroke_type > p);

    // strokeEnd
    // 
    typedef ::xml_schema::string strokeEnd_type;
    typedef ::xsd::cxx::tree::optional< strokeEnd_type > strokeEnd_optional;
    typedef ::xsd::cxx::tree::traits< strokeEnd_type, char > strokeEnd_traits;

    const strokeEnd_optional&
    strokeEnd () const;

    strokeEnd_optional&
    strokeEnd ();

    void
    strokeEnd (const strokeEnd_type& x);

    void
    strokeEnd (const strokeEnd_optional& x);

    void
    strokeEnd (::std::auto_ptr< strokeEnd_type > p);

    // relax
    // 
    typedef ::xml_schema::string relax_type;
    typedef ::xsd::cxx::tree::optional< relax_type > relax_optional;
    typedef ::xsd::cxx::tree::traits< relax_type, char > relax_traits;

    const relax_optional&
    relax () const;

    relax_optional&
    relax ();

    void
    relax (const relax_type& x);

    void
    relax (const relax_optional& x);

    void
    relax (::std::auto_ptr< relax_type > p);

    // ready
    // 
    typedef ::xml_schema::string ready_type;
    typedef ::xsd::cxx::tree::optional< ready_type > ready_optional;
    typedef ::xsd::cxx::tree::traits< ready_type, char > ready_traits;

    const ready_optional&
    ready () const;

    ready_optional&
    ready ();

    void
    ready (const ready_type& x);

    void
    ready (const ready_optional& x);

    void
    ready (::std::auto_ptr< ready_type > p);

    // Constructors.
    //
    gestureType (const id_type&);

    gestureType (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    gestureType (const gestureType& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual gestureType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~gestureType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    lexeme_optional lexeme_;
    mode_optional mode_;
    strokeStart_optional strokeStart_;
    stroke_optional stroke_;
    strokeEnd_optional strokeEnd_;
    relax_optional relax_;
    ready_optional ready_;
  };

  class syncType: public ::xml_schema::type
  {
    public:
    // id
    // 
    typedef ::xml_schema::string id_type;
    typedef ::xsd::cxx::tree::optional< id_type > id_optional;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_optional&
    id () const;

    id_optional&
    id ();

    void
    id (const id_type& x);

    void
    id (const id_optional& x);

    void
    id (::std::auto_ptr< id_type > p);

    // Constructors.
    //
    syncType ();

    syncType (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    syncType (const syncType& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual syncType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~syncType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    id_optional id_;
  };

  class textType: public ::xml_schema::type
  {
    public:
    // sync
    // 
    typedef ::bml::syncType sync_type;
    typedef ::xsd::cxx::tree::sequence< sync_type > sync_sequence;
    typedef sync_sequence::iterator sync_iterator;
    typedef sync_sequence::const_iterator sync_const_iterator;
    typedef ::xsd::cxx::tree::traits< sync_type, char > sync_traits;

    const sync_sequence&
    sync () const;

    sync_sequence&
    sync ();

    void
    sync (const sync_sequence& s);

    // Constructors.
    //
    textType ();

    textType (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    textType (const textType& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual textType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~textType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    sync_sequence sync_;
  };

  class speech: public ::bml::behaviorType
  {
    public:
    // text
    // 
    typedef ::bml::textType text_type;
    typedef ::xsd::cxx::tree::sequence< text_type > text_sequence;
    typedef text_sequence::iterator text_iterator;
    typedef text_sequence::const_iterator text_const_iterator;
    typedef ::xsd::cxx::tree::traits< text_type, char > text_traits;

    const text_sequence&
    text () const;

    text_sequence&
    text ();

    void
    text (const text_sequence& s);

    // Constructors.
    //
    speech (const id_type&);

    speech (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    speech (const speech& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    virtual speech*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~speech ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    text_sequence text_;
  };

  class postureType: public ::bml::behaviorType
  {
    public:
    // pose
    // 
    typedef ::bml::poseType pose_type;
    typedef ::xsd::cxx::tree::sequence< pose_type > pose_sequence;
    typedef pose_sequence::iterator pose_iterator;
    typedef pose_sequence::const_iterator pose_const_iterator;
    typedef ::xsd::cxx::tree::traits< pose_type, char > pose_traits;

    const pose_sequence&
    pose () const;

    pose_sequence&
    pose ();

    void
    pose (const pose_sequence& s);

    // stance
    // 
    typedef ::bml::stanceType stance_type;
    typedef ::xsd::cxx::tree::optional< stance_type > stance_optional;
    typedef ::xsd::cxx::tree::traits< stance_type, char > stance_traits;

    const stance_optional&
    stance () const;

    stance_optional&
    stance ();

    void
    stance (const stance_type& x);

    void
    stance (const stance_optional& x);

    void
    stance (::std::auto_ptr< stance_type > p);

    // ready
    // 
    typedef ::xml_schema::string ready_type;
    typedef ::xsd::cxx::tree::optional< ready_type > ready_optional;
    typedef ::xsd::cxx::tree::traits< ready_type, char > ready_traits;

    const ready_optional&
    ready () const;

    ready_optional&
    ready ();

    void
    ready (const ready_type& x);

    void
    ready (const ready_optional& x);

    void
    ready (::std::auto_ptr< ready_type > p);

    // relax
    // 
    typedef ::xml_schema::string relax_type;
    typedef ::xsd::cxx::tree::optional< relax_type > relax_optional;
    typedef ::xsd::cxx::tree::traits< relax_type, char > relax_traits;

    const relax_optional&
    relax () const;

    relax_optional&
    relax ();

    void
    relax (const relax_type& x);

    void
    relax (const relax_optional& x);

    void
    relax (::std::auto_ptr< relax_type > p);

    // Constructors.
    //
    postureType (const id_type&);

    postureType (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    postureType (const postureType& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual postureType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~postureType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    pose_sequence pose_;
    stance_optional stance_;
    ready_optional ready_;
    relax_optional relax_;
  };

  class faceAbstractType: public ::bml::behaviorType
  {
    public:
    // amount
    // 
    typedef ::xml_schema::float_ amount_type;
    typedef ::xsd::cxx::tree::traits< amount_type, char > amount_traits;

    const amount_type&
    amount () const;

    amount_type&
    amount ();

    void
    amount (const amount_type& x);

    static amount_type
    amount_default_value ();

    // attackPeak
    // 
    typedef ::xml_schema::string attackPeak_type;
    typedef ::xsd::cxx::tree::optional< attackPeak_type > attackPeak_optional;
    typedef ::xsd::cxx::tree::traits< attackPeak_type, char > attackPeak_traits;

    const attackPeak_optional&
    attackPeak () const;

    attackPeak_optional&
    attackPeak ();

    void
    attackPeak (const attackPeak_type& x);

    void
    attackPeak (const attackPeak_optional& x);

    void
    attackPeak (::std::auto_ptr< attackPeak_type > p);

    // relax
    // 
    typedef ::xml_schema::string relax_type;
    typedef ::xsd::cxx::tree::optional< relax_type > relax_optional;
    typedef ::xsd::cxx::tree::traits< relax_type, char > relax_traits;

    const relax_optional&
    relax () const;

    relax_optional&
    relax ();

    void
    relax (const relax_type& x);

    void
    relax (const relax_optional& x);

    void
    relax (::std::auto_ptr< relax_type > p);

    // Constructors.
    //
    faceAbstractType (const id_type&);

    faceAbstractType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    faceAbstractType (const faceAbstractType& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    virtual faceAbstractType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~faceAbstractType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< amount_type > amount_;
    attackPeak_optional attackPeak_;
    relax_optional relax_;
  };

  class faceLexemeType: public ::bml::faceAbstractType
  {
    public:
    // lexeme
    // 
    typedef ::bml::openSetItem lexeme_type;
    typedef ::xsd::cxx::tree::traits< lexeme_type, char > lexeme_traits;

    const lexeme_type&
    lexeme () const;

    lexeme_type&
    lexeme ();

    void
    lexeme (const lexeme_type& x);

    void
    lexeme (::std::auto_ptr< lexeme_type > p);

    // Constructors.
    //
    faceLexemeType (const id_type&,
                    const lexeme_type&);

    faceLexemeType (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    faceLexemeType (const faceLexemeType& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    virtual faceLexemeType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~faceLexemeType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< lexeme_type > lexeme_;
  };

  class syncBlock: public ::xml_schema::type
  {
    public:
    // sync
    // 
    typedef ::bml::syncType sync_type;
    typedef ::xsd::cxx::tree::sequence< sync_type > sync_sequence;
    typedef sync_sequence::iterator sync_iterator;
    typedef sync_sequence::const_iterator sync_const_iterator;
    typedef ::xsd::cxx::tree::traits< sync_type, char > sync_traits;

    const sync_sequence&
    sync () const;

    sync_sequence&
    sync ();

    void
    sync (const sync_sequence& s);

    // ref
    // 
    typedef ::xml_schema::string ref_type;
    typedef ::xsd::cxx::tree::optional< ref_type > ref_optional;
    typedef ::xsd::cxx::tree::traits< ref_type, char > ref_traits;

    const ref_optional&
    ref () const;

    ref_optional&
    ref ();

    void
    ref (const ref_type& x);

    void
    ref (const ref_optional& x);

    void
    ref (::std::auto_ptr< ref_type > p);

    // Constructors.
    //
    syncBlock ();

    syncBlock (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    syncBlock (const syncBlock& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual syncBlock*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~syncBlock ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    sync_sequence sync_;
    ref_optional ref_;
  };

  class targetID: public ::xml_schema::string
  {
    public:
    // Constructors.
    //
    targetID ();

    targetID (const char*);

    targetID (const ::std::string&);

    targetID (const ::xml_schema::string&);

    targetID (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    targetID (const ::xercesc::DOMAttr& a,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    targetID (const ::std::string& s,
              const ::xercesc::DOMElement* e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    targetID (const targetID& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual targetID*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~targetID ();
  };

  class id: public ::xml_schema::string
  {
    public:
    // Constructors.
    //
    id ();

    id (const char*);

    id (const ::std::string&);

    id (const ::xml_schema::string&);

    id (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

    id (const ::xercesc::DOMAttr& a,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

    id (const ::std::string& s,
        const ::xercesc::DOMElement* e,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

    id (const id& x,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

    virtual id*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~id ();
  };

  class openSetItem: public ::xml_schema::simple_type,
    public ::xsd::cxx::tree::list< ::xml_schema::string, char >
  {
    public:
    openSetItem ();

    openSetItem (size_type n, const ::xml_schema::string& x);

    template < typename I >
    openSetItem (const I& begin, const I& end)
    : ::xsd::cxx::tree::list< ::xml_schema::string, char > (begin, end, this)
    {
    }

    openSetItem (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    openSetItem (const ::xercesc::DOMAttr& a,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    openSetItem (const ::std::string& s,
                 const ::xercesc::DOMElement* e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    openSetItem (const openSetItem& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual openSetItem*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~openSetItem ();
  };

  class closedSetItem: public ::xml_schema::simple_type,
    public ::xsd::cxx::tree::list< ::xml_schema::string, char >
  {
    public:
    closedSetItem ();

    closedSetItem (size_type n, const ::xml_schema::string& x);

    template < typename I >
    closedSetItem (const I& begin, const I& end)
    : ::xsd::cxx::tree::list< ::xml_schema::string, char > (begin, end, this)
    {
    }

    closedSetItem (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    closedSetItem (const ::xercesc::DOMAttr& a,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    closedSetItem (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    closedSetItem (const closedSetItem& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual closedSetItem*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~closedSetItem ();
  };

  class pointingType: public ::bml::behaviorType
  {
    public:
    // target
    // 
    typedef ::bml::targetID target_type;
    typedef ::xsd::cxx::tree::optional< target_type > target_optional;
    typedef ::xsd::cxx::tree::traits< target_type, char > target_traits;

    const target_optional&
    target () const;

    target_optional&
    target ();

    void
    target (const target_type& x);

    void
    target (const target_optional& x);

    void
    target (::std::auto_ptr< target_type > p);

    // mode
    // 
    typedef ::bml::closedSetItem mode_type;
    typedef ::xsd::cxx::tree::optional< mode_type > mode_optional;
    typedef ::xsd::cxx::tree::traits< mode_type, char > mode_traits;

    const mode_optional&
    mode () const;

    mode_optional&
    mode ();

    void
    mode (const mode_type& x);

    void
    mode (const mode_optional& x);

    void
    mode (::std::auto_ptr< mode_type > p);

    // ready
    // 
    typedef ::xml_schema::string ready_type;
    typedef ::xsd::cxx::tree::optional< ready_type > ready_optional;
    typedef ::xsd::cxx::tree::traits< ready_type, char > ready_traits;

    const ready_optional&
    ready () const;

    ready_optional&
    ready ();

    void
    ready (const ready_type& x);

    void
    ready (const ready_optional& x);

    void
    ready (::std::auto_ptr< ready_type > p);

    // strokeStart
    // 
    typedef ::xml_schema::string strokeStart_type;
    typedef ::xsd::cxx::tree::optional< strokeStart_type > strokeStart_optional;
    typedef ::xsd::cxx::tree::traits< strokeStart_type, char > strokeStart_traits;

    const strokeStart_optional&
    strokeStart () const;

    strokeStart_optional&
    strokeStart ();

    void
    strokeStart (const strokeStart_type& x);

    void
    strokeStart (const strokeStart_optional& x);

    void
    strokeStart (::std::auto_ptr< strokeStart_type > p);

    // stroke
    // 
    typedef ::xml_schema::string stroke_type;
    typedef ::xsd::cxx::tree::optional< stroke_type > stroke_optional;
    typedef ::xsd::cxx::tree::traits< stroke_type, char > stroke_traits;

    const stroke_optional&
    stroke () const;

    stroke_optional&
    stroke ();

    void
    stroke (const stroke_type& x);

    void
    stroke (const stroke_optional& x);

    void
    stroke (::std::auto_ptr< stroke_type > p);

    // strokeEnd
    // 
    typedef ::xml_schema::string strokeEnd_type;
    typedef ::xsd::cxx::tree::optional< strokeEnd_type > strokeEnd_optional;
    typedef ::xsd::cxx::tree::traits< strokeEnd_type, char > strokeEnd_traits;

    const strokeEnd_optional&
    strokeEnd () const;

    strokeEnd_optional&
    strokeEnd ();

    void
    strokeEnd (const strokeEnd_type& x);

    void
    strokeEnd (const strokeEnd_optional& x);

    void
    strokeEnd (::std::auto_ptr< strokeEnd_type > p);

    // relax
    // 
    typedef ::xml_schema::string relax_type;
    typedef ::xsd::cxx::tree::optional< relax_type > relax_optional;
    typedef ::xsd::cxx::tree::traits< relax_type, char > relax_traits;

    const relax_optional&
    relax () const;

    relax_optional&
    relax ();

    void
    relax (const relax_type& x);

    void
    relax (const relax_optional& x);

    void
    relax (::std::auto_ptr< relax_type > p);

    // Constructors.
    //
    pointingType (const id_type&);

    pointingType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    pointingType (const pointingType& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    virtual pointingType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~pointingType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    target_optional target_;
    mode_optional mode_;
    ready_optional ready_;
    strokeStart_optional strokeStart_;
    stroke_optional stroke_;
    strokeEnd_optional strokeEnd_;
    relax_optional relax_;
  };

  class locomotionType: public ::bml::behaviorType
  {
    public:
    // manner
    // 
    typedef ::xml_schema::string manner_type;
    typedef ::xsd::cxx::tree::optional< manner_type > manner_optional;
    typedef ::xsd::cxx::tree::traits< manner_type, char > manner_traits;

    const manner_optional&
    manner () const;

    manner_optional&
    manner ();

    void
    manner (const manner_type& x);

    void
    manner (const manner_optional& x);

    void
    manner (::std::auto_ptr< manner_type > p);

    // target
    // 
    typedef ::bml::targetID target_type;
    typedef ::xsd::cxx::tree::optional< target_type > target_optional;
    typedef ::xsd::cxx::tree::traits< target_type, char > target_traits;

    const target_optional&
    target () const;

    target_optional&
    target ();

    void
    target (const target_type& x);

    void
    target (const target_optional& x);

    void
    target (::std::auto_ptr< target_type > p);

    // Constructors.
    //
    locomotionType (const id_type&);

    locomotionType (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    locomotionType (const locomotionType& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    virtual locomotionType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~locomotionType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    manner_optional manner_;
    target_optional target_;
  };

  class headDirectionShiftType: public ::bml::behaviorType
  {
    public:
    // target
    // 
    typedef ::bml::targetID target_type;
    typedef ::xsd::cxx::tree::traits< target_type, char > target_traits;

    const target_type&
    target () const;

    target_type&
    target ();

    void
    target (const target_type& x);

    void
    target (::std::auto_ptr< target_type > p);

    // Constructors.
    //
    headDirectionShiftType (const id_type&,
                            const target_type&);

    headDirectionShiftType (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    headDirectionShiftType (const headDirectionShiftType& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    virtual headDirectionShiftType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~headDirectionShiftType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< target_type > target_;
  };

  class faceFacs: public ::bml::faceAbstractType
  {
    public:
    // au
    // 
    typedef ::xml_schema::int_ au_type;
    typedef ::xsd::cxx::tree::traits< au_type, char > au_traits;

    const au_type&
    au () const;

    au_type&
    au ();

    void
    au (const au_type& x);

    // side
    // 
    typedef ::bml::closedSetItem side_type;
    typedef ::xsd::cxx::tree::traits< side_type, char > side_traits;

    const side_type&
    side () const;

    side_type&
    side ();

    void
    side (const side_type& x);

    void
    side (::std::auto_ptr< side_type > p);

    static const side_type&
    side_default_value ();

    // Constructors.
    //
    faceFacs (const id_type&,
              const au_type&);

    faceFacs (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    faceFacs (const faceFacs& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual faceFacs*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~faceFacs ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< au_type > au_;
    ::xsd::cxx::tree::one< side_type > side_;
    static const side_type side_default_value_;
  };

  class faceType: public ::bml::faceAbstractType
  {
    public:
    // lexeme
    // 
    typedef ::bml::lexemeType lexeme_type;
    typedef ::xsd::cxx::tree::traits< lexeme_type, char > lexeme_traits;

    const lexeme_type&
    lexeme () const;

    lexeme_type&
    lexeme ();

    void
    lexeme (const lexeme_type& x);

    void
    lexeme (::std::auto_ptr< lexeme_type > p);

    // Constructors.
    //
    faceType (const id_type&,
              const lexeme_type&);

    faceType (const id_type&,
              ::std::auto_ptr< lexeme_type >&);

    faceType (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    faceType (const faceType& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual faceType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~faceType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< lexeme_type > lexeme_;
  };

  class faceShiftType: public ::bml::faceAbstractType
  {
    public:
    // lexeme
    // 
    typedef ::bml::lexemeType lexeme_type;
    typedef ::xsd::cxx::tree::traits< lexeme_type, char > lexeme_traits;

    const lexeme_type&
    lexeme () const;

    lexeme_type&
    lexeme ();

    void
    lexeme (const lexeme_type& x);

    void
    lexeme (::std::auto_ptr< lexeme_type > p);

    // Constructors.
    //
    faceShiftType (const id_type&,
                   const lexeme_type&);

    faceShiftType (const id_type&,
                   ::std::auto_ptr< lexeme_type >&);

    faceShiftType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    faceShiftType (const faceShiftType& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual faceShiftType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~faceShiftType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< lexeme_type > lexeme_;
  };

  class lexemeType: public ::xml_schema::type
  {
    public:
    // lexeme
    // 
    typedef ::bml::openSetItem lexeme_type;
    typedef ::xsd::cxx::tree::traits< lexeme_type, char > lexeme_traits;

    const lexeme_type&
    lexeme () const;

    lexeme_type&
    lexeme ();

    void
    lexeme (const lexeme_type& x);

    void
    lexeme (::std::auto_ptr< lexeme_type > p);

    // amount
    // 
    typedef ::xml_schema::float_ amount_type;
    typedef ::xsd::cxx::tree::traits< amount_type, char > amount_traits;

    const amount_type&
    amount () const;

    amount_type&
    amount ();

    void
    amount (const amount_type& x);

    // Constructors.
    //
    lexemeType (const lexeme_type&,
                const amount_type&);

    lexemeType (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    lexemeType (const lexemeType& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual lexemeType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~lexemeType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< lexeme_type > lexeme_;
    ::xsd::cxx::tree::one< amount_type > amount_;
  };

  class headType: public ::bml::behaviorType
  {
    public:
    // ready
    // 
    typedef ::xml_schema::string ready_type;
    typedef ::xsd::cxx::tree::optional< ready_type > ready_optional;
    typedef ::xsd::cxx::tree::traits< ready_type, char > ready_traits;

    const ready_optional&
    ready () const;

    ready_optional&
    ready ();

    void
    ready (const ready_type& x);

    void
    ready (const ready_optional& x);

    void
    ready (::std::auto_ptr< ready_type > p);

    // strokeStart
    // 
    typedef ::xml_schema::string strokeStart_type;
    typedef ::xsd::cxx::tree::optional< strokeStart_type > strokeStart_optional;
    typedef ::xsd::cxx::tree::traits< strokeStart_type, char > strokeStart_traits;

    const strokeStart_optional&
    strokeStart () const;

    strokeStart_optional&
    strokeStart ();

    void
    strokeStart (const strokeStart_type& x);

    void
    strokeStart (const strokeStart_optional& x);

    void
    strokeStart (::std::auto_ptr< strokeStart_type > p);

    // stroke
    // 
    typedef ::xml_schema::string stroke_type;
    typedef ::xsd::cxx::tree::optional< stroke_type > stroke_optional;
    typedef ::xsd::cxx::tree::traits< stroke_type, char > stroke_traits;

    const stroke_optional&
    stroke () const;

    stroke_optional&
    stroke ();

    void
    stroke (const stroke_type& x);

    void
    stroke (const stroke_optional& x);

    void
    stroke (::std::auto_ptr< stroke_type > p);

    // strokeEnd
    // 
    typedef ::xml_schema::string strokeEnd_type;
    typedef ::xsd::cxx::tree::optional< strokeEnd_type > strokeEnd_optional;
    typedef ::xsd::cxx::tree::traits< strokeEnd_type, char > strokeEnd_traits;

    const strokeEnd_optional&
    strokeEnd () const;

    strokeEnd_optional&
    strokeEnd ();

    void
    strokeEnd (const strokeEnd_type& x);

    void
    strokeEnd (const strokeEnd_optional& x);

    void
    strokeEnd (::std::auto_ptr< strokeEnd_type > p);

    // relax
    // 
    typedef ::xml_schema::string relax_type;
    typedef ::xsd::cxx::tree::optional< relax_type > relax_optional;
    typedef ::xsd::cxx::tree::traits< relax_type, char > relax_traits;

    const relax_optional&
    relax () const;

    relax_optional&
    relax ();

    void
    relax (const relax_type& x);

    void
    relax (const relax_optional& x);

    void
    relax (::std::auto_ptr< relax_type > p);

    // lexeme
    // 
    typedef ::xml_schema::string lexeme_type;
    typedef ::xsd::cxx::tree::optional< lexeme_type > lexeme_optional;
    typedef ::xsd::cxx::tree::traits< lexeme_type, char > lexeme_traits;

    const lexeme_optional&
    lexeme () const;

    lexeme_optional&
    lexeme ();

    void
    lexeme (const lexeme_type& x);

    void
    lexeme (const lexeme_optional& x);

    void
    lexeme (::std::auto_ptr< lexeme_type > p);

    // repetition
    // 
    typedef ::xml_schema::int_ repetition_type;
    typedef ::xsd::cxx::tree::optional< repetition_type > repetition_optional;
    typedef ::xsd::cxx::tree::traits< repetition_type, char > repetition_traits;

    const repetition_optional&
    repetition () const;

    repetition_optional&
    repetition ();

    void
    repetition (const repetition_type& x);

    void
    repetition (const repetition_optional& x);

    // amount
    // 
    typedef ::xml_schema::float_ amount_type;
    typedef ::xsd::cxx::tree::optional< amount_type > amount_optional;
    typedef ::xsd::cxx::tree::traits< amount_type, char > amount_traits;

    const amount_optional&
    amount () const;

    amount_optional&
    amount ();

    void
    amount (const amount_type& x);

    void
    amount (const amount_optional& x);

    // target
    // 
    typedef ::xml_schema::string target_type;
    typedef ::xsd::cxx::tree::optional< target_type > target_optional;
    typedef ::xsd::cxx::tree::traits< target_type, char > target_traits;

    const target_optional&
    target () const;

    target_optional&
    target ();

    void
    target (const target_type& x);

    void
    target (const target_optional& x);

    void
    target (::std::auto_ptr< target_type > p);

    // Constructors.
    //
    headType (const id_type&);

    headType (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    headType (const headType& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual headType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~headType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ready_optional ready_;
    strokeStart_optional strokeStart_;
    stroke_optional stroke_;
    strokeEnd_optional strokeEnd_;
    relax_optional relax_;
    lexeme_optional lexeme_;
    repetition_optional repetition_;
    amount_optional amount_;
    target_optional target_;
  };

  class stanceType: public ::xml_schema::type
  {
    public:
    // type
    // 
    typedef ::bml::closedSetItem type_type;
    typedef ::xsd::cxx::tree::optional< type_type > type_optional;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_optional&
    type () const;

    type_optional&
    type ();

    void
    type (const type_type& x);

    void
    type (const type_optional& x);

    void
    type (::std::auto_ptr< type_type > p);

    // Constructors.
    //
    stanceType ();

    stanceType (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    stanceType (const stanceType& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual stanceType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~stanceType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    type_optional type_;
  };

  class poseType: public ::xml_schema::type
  {
    public:
    // type
    // 
    typedef ::bml::closedSetItem type_type;
    typedef ::xsd::cxx::tree::optional< type_type > type_optional;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_optional&
    type () const;

    type_optional&
    type ();

    void
    type (const type_type& x);

    void
    type (const type_optional& x);

    void
    type (::std::auto_ptr< type_type > p);

    // lexeme
    // 
    typedef ::bml::openSetItem lexeme_type;
    typedef ::xsd::cxx::tree::optional< lexeme_type > lexeme_optional;
    typedef ::xsd::cxx::tree::traits< lexeme_type, char > lexeme_traits;

    const lexeme_optional&
    lexeme () const;

    lexeme_optional&
    lexeme ();

    void
    lexeme (const lexeme_type& x);

    void
    lexeme (const lexeme_optional& x);

    void
    lexeme (::std::auto_ptr< lexeme_type > p);

    // Constructors.
    //
    poseType ();

    poseType (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    poseType (const poseType& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual poseType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~poseType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    type_optional type_;
    lexeme_optional lexeme_;
  };

  class bml: public ::xml_schema::type
  {
    public:
    // required
    // 
    typedef ::bml::requiredType required_type;
    typedef ::xsd::cxx::tree::sequence< required_type > required_sequence;
    typedef required_sequence::iterator required_iterator;
    typedef required_sequence::const_iterator required_const_iterator;
    typedef ::xsd::cxx::tree::traits< required_type, char > required_traits;

    const required_sequence&
    required () const;

    required_sequence&
    required ();

    void
    required (const required_sequence& s);

    // constraint
    // 
    typedef ::bml::constraintType constraint_type;
    typedef ::xsd::cxx::tree::sequence< constraint_type > constraint_sequence;
    typedef constraint_sequence::iterator constraint_iterator;
    typedef constraint_sequence::const_iterator constraint_const_iterator;
    typedef ::xsd::cxx::tree::traits< constraint_type, char > constraint_traits;

    const constraint_sequence&
    constraint () const;

    constraint_sequence&
    constraint ();

    void
    constraint (const constraint_sequence& s);

    // gaze
    // 
    typedef ::bml::gazeType gaze_type;
    typedef ::xsd::cxx::tree::sequence< gaze_type > gaze_sequence;
    typedef gaze_sequence::iterator gaze_iterator;
    typedef gaze_sequence::const_iterator gaze_const_iterator;
    typedef ::xsd::cxx::tree::traits< gaze_type, char > gaze_traits;

    const gaze_sequence&
    gaze () const;

    gaze_sequence&
    gaze ();

    void
    gaze (const gaze_sequence& s);

    // wait
    // 
    typedef ::bml::waitType wait_type;
    typedef ::xsd::cxx::tree::sequence< wait_type > wait_sequence;
    typedef wait_sequence::iterator wait_iterator;
    typedef wait_sequence::const_iterator wait_const_iterator;
    typedef ::xsd::cxx::tree::traits< wait_type, char > wait_traits;

    const wait_sequence&
    wait () const;

    wait_sequence&
    wait ();

    void
    wait (const wait_sequence& s);

    // headOrientation
    // 
    typedef ::xml_schema::string headOrientation_type;
    typedef ::xsd::cxx::tree::sequence< headOrientation_type > headOrientation_sequence;
    typedef headOrientation_sequence::iterator headOrientation_iterator;
    typedef headOrientation_sequence::const_iterator headOrientation_const_iterator;
    typedef ::xsd::cxx::tree::traits< headOrientation_type, char > headOrientation_traits;

    const headOrientation_sequence&
    headOrientation () const;

    headOrientation_sequence&
    headOrientation ();

    void
    headOrientation (const headOrientation_sequence& s);

    // posture
    // 
    typedef ::bml::postureType posture_type;
    typedef ::xsd::cxx::tree::sequence< posture_type > posture_sequence;
    typedef posture_sequence::iterator posture_iterator;
    typedef posture_sequence::const_iterator posture_const_iterator;
    typedef ::xsd::cxx::tree::traits< posture_type, char > posture_traits;

    const posture_sequence&
    posture () const;

    posture_sequence&
    posture ();

    void
    posture (const posture_sequence& s);

    // postureShift
    // 
    typedef ::bml::postureType postureShift_type;
    typedef ::xsd::cxx::tree::sequence< postureShift_type > postureShift_sequence;
    typedef postureShift_sequence::iterator postureShift_iterator;
    typedef postureShift_sequence::const_iterator postureShift_const_iterator;
    typedef ::xsd::cxx::tree::traits< postureShift_type, char > postureShift_traits;

    const postureShift_sequence&
    postureShift () const;

    postureShift_sequence&
    postureShift ();

    void
    postureShift (const postureShift_sequence& s);

    // speech
    // 
    typedef ::bml::speech speech_type;
    typedef ::xsd::cxx::tree::sequence< speech_type > speech_sequence;
    typedef speech_sequence::iterator speech_iterator;
    typedef speech_sequence::const_iterator speech_const_iterator;
    typedef ::xsd::cxx::tree::traits< speech_type, char > speech_traits;

    const speech_sequence&
    speech () const;

    speech_sequence&
    speech ();

    void
    speech (const speech_sequence& s);

    // gesture
    // 
    typedef ::bml::gestureType gesture_type;
    typedef ::xsd::cxx::tree::sequence< gesture_type > gesture_sequence;
    typedef gesture_sequence::iterator gesture_iterator;
    typedef gesture_sequence::const_iterator gesture_const_iterator;
    typedef ::xsd::cxx::tree::traits< gesture_type, char > gesture_traits;

    const gesture_sequence&
    gesture () const;

    gesture_sequence&
    gesture ();

    void
    gesture (const gesture_sequence& s);

    // pointing
    // 
    typedef ::bml::pointingType pointing_type;
    typedef ::xsd::cxx::tree::sequence< pointing_type > pointing_sequence;
    typedef pointing_sequence::iterator pointing_iterator;
    typedef pointing_sequence::const_iterator pointing_const_iterator;
    typedef ::xsd::cxx::tree::traits< pointing_type, char > pointing_traits;

    const pointing_sequence&
    pointing () const;

    pointing_sequence&
    pointing ();

    void
    pointing (const pointing_sequence& s);

    // face
    // 
    typedef ::bml::faceAbstractType face_type;
    typedef ::xsd::cxx::tree::sequence< face_type > face_sequence;
    typedef face_sequence::iterator face_iterator;
    typedef face_sequence::const_iterator face_const_iterator;
    typedef ::xsd::cxx::tree::traits< face_type, char > face_traits;

    const face_sequence&
    face () const;

    face_sequence&
    face ();

    void
    face (const face_sequence& s);

    // faceLexeme
    // 
    typedef ::bml::faceLexemeType faceLexeme_type;
    typedef ::xsd::cxx::tree::sequence< faceLexeme_type > faceLexeme_sequence;
    typedef faceLexeme_sequence::iterator faceLexeme_iterator;
    typedef faceLexeme_sequence::const_iterator faceLexeme_const_iterator;
    typedef ::xsd::cxx::tree::traits< faceLexeme_type, char > faceLexeme_traits;

    const faceLexeme_sequence&
    faceLexeme () const;

    faceLexeme_sequence&
    faceLexeme ();

    void
    faceLexeme (const faceLexeme_sequence& s);

    // locomotion
    // 
    typedef ::bml::locomotionType locomotion_type;
    typedef ::xsd::cxx::tree::sequence< locomotion_type > locomotion_sequence;
    typedef locomotion_sequence::iterator locomotion_iterator;
    typedef locomotion_sequence::const_iterator locomotion_const_iterator;
    typedef ::xsd::cxx::tree::traits< locomotion_type, char > locomotion_traits;

    const locomotion_sequence&
    locomotion () const;

    locomotion_sequence&
    locomotion ();

    void
    locomotion (const locomotion_sequence& s);

    // head
    // 
    typedef ::bml::headType head_type;
    typedef ::xsd::cxx::tree::sequence< head_type > head_sequence;
    typedef head_sequence::iterator head_iterator;
    typedef head_sequence::const_iterator head_const_iterator;
    typedef ::xsd::cxx::tree::traits< head_type, char > head_traits;

    const head_sequence&
    head () const;

    head_sequence&
    head ();

    void
    head (const head_sequence& s);

    // headDirectionShift
    // 
    typedef ::bml::headDirectionShiftType headDirectionShift_type;
    typedef ::xsd::cxx::tree::sequence< headDirectionShift_type > headDirectionShift_sequence;
    typedef headDirectionShift_sequence::iterator headDirectionShift_iterator;
    typedef headDirectionShift_sequence::const_iterator headDirectionShift_const_iterator;
    typedef ::xsd::cxx::tree::traits< headDirectionShift_type, char > headDirectionShift_traits;

    const headDirectionShift_sequence&
    headDirectionShift () const;

    headDirectionShift_sequence&
    headDirectionShift ();

    void
    headDirectionShift (const headDirectionShift_sequence& s);

    // id
    // 
    typedef ::xml_schema::id id_type;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_type&
    id () const;

    id_type&
    id ();

    void
    id (const id_type& x);

    void
    id (::std::auto_ptr< id_type > p);

    // characterId
    // 
    typedef ::bml::targetID characterId_type;
    typedef ::xsd::cxx::tree::optional< characterId_type > characterId_optional;
    typedef ::xsd::cxx::tree::traits< characterId_type, char > characterId_traits;

    const characterId_optional&
    characterId () const;

    characterId_optional&
    characterId ();

    void
    characterId (const characterId_type& x);

    void
    characterId (const characterId_optional& x);

    void
    characterId (::std::auto_ptr< characterId_type > p);

    // composition
    // 
    typedef ::bml::openSetItem composition_type;
    typedef ::xsd::cxx::tree::traits< composition_type, char > composition_traits;

    const composition_type&
    composition () const;

    composition_type&
    composition ();

    void
    composition (const composition_type& x);

    void
    composition (::std::auto_ptr< composition_type > p);

    static const composition_type&
    composition_default_value ();

    // Constructors.
    //
    bml (const id_type&);

    bml (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

    bml (const bml& x,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

    virtual bml*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~bml ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    required_sequence required_;
    constraint_sequence constraint_;
    gaze_sequence gaze_;
    wait_sequence wait_;
    headOrientation_sequence headOrientation_;
    posture_sequence posture_;
    postureShift_sequence postureShift_;
    speech_sequence speech_;
    gesture_sequence gesture_;
    pointing_sequence pointing_;
    face_sequence face_;
    faceLexeme_sequence faceLexeme_;
    locomotion_sequence locomotion_;
    head_sequence head_;
    headDirectionShift_sequence headDirectionShift_;
    ::xsd::cxx::tree::one< id_type > id_;
    characterId_optional characterId_;
    ::xsd::cxx::tree::one< composition_type > composition_;
    static const composition_type composition_default_value_;
  };
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace bml
{
  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::bml::bml >
  bml_ (const ::std::string& uri,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::bml::bml >
  bml_ (const ::std::string& uri,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::bml::bml >
  bml_ (const ::std::string& uri,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::bml::bml >
  bml_ (::std::istream& is,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::bml::bml >
  bml_ (::std::istream& is,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::bml::bml >
  bml_ (::std::istream& is,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::bml::bml >
  bml_ (::std::istream& is,
        const ::std::string& id,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::bml::bml >
  bml_ (::std::istream& is,
        const ::std::string& id,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::bml::bml >
  bml_ (::std::istream& is,
        const ::std::string& id,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::bml::bml >
  bml_ (::xercesc::InputSource& is,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::bml::bml >
  bml_ (::xercesc::InputSource& is,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::bml::bml >
  bml_ (::xercesc::InputSource& is,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::bml::bml >
  bml_ (const ::xercesc::DOMDocument& d,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::bml::bml >
  bml_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace bml
{
  // Serialize to std::ostream.
  //

  void
  bml_ (::std::ostream& os,
        const ::bml::bml& x, 
        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
        const ::std::string& e = "UTF-8",
        ::xml_schema::flags f = 0);

  void
  bml_ (::std::ostream& os,
        const ::bml::bml& x, 
        ::xml_schema::error_handler& eh,
        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
        const ::std::string& e = "UTF-8",
        ::xml_schema::flags f = 0);

  void
  bml_ (::std::ostream& os,
        const ::bml::bml& x, 
        ::xercesc::DOMErrorHandler& eh,
        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
        const ::std::string& e = "UTF-8",
        ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  bml_ (::xercesc::XMLFormatTarget& ft,
        const ::bml::bml& x, 
        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
        const ::std::string& e = "UTF-8",
        ::xml_schema::flags f = 0);

  void
  bml_ (::xercesc::XMLFormatTarget& ft,
        const ::bml::bml& x, 
        ::xml_schema::error_handler& eh,
        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
        const ::std::string& e = "UTF-8",
        ::xml_schema::flags f = 0);

  void
  bml_ (::xercesc::XMLFormatTarget& ft,
        const ::bml::bml& x, 
        ::xercesc::DOMErrorHandler& eh,
        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
        const ::std::string& e = "UTF-8",
        ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  bml_ (::xercesc::DOMDocument& d,
        const ::bml::bml& x,
        ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  bml_ (const ::bml::bml& x, 
        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
        ::xml_schema::flags f = 0);

  void
  operator<< (::xercesc::DOMElement&, const requiredType&);

  void
  operator<< (::xercesc::DOMElement&, const behaviorType&);

  void
  operator<< (::xercesc::DOMElement&, const constraintType&);

  void
  operator<< (::xercesc::DOMElement&, const synchronizeType&);

  void
  operator<< (::xercesc::DOMElement&, const beforeType&);

  void
  operator<< (::xercesc::DOMElement&, const afterType&);

  void
  operator<< (::xercesc::DOMElement&, const syncRefType&);

  void
  operator<< (::xercesc::DOMElement&, const waitType&);

  void
  operator<< (::xercesc::DOMElement&, const gazeType&);

  void
  operator<< (::xercesc::DOMElement&, const gestureType&);

  void
  operator<< (::xercesc::DOMElement&, const syncType&);

  void
  operator<< (::xercesc::DOMElement&, const textType&);

  void
  operator<< (::xercesc::DOMElement&, const speech&);

  void
  operator<< (::xercesc::DOMElement&, const postureType&);

  void
  operator<< (::xercesc::DOMElement&, const faceAbstractType&);

  void
  operator<< (::xercesc::DOMElement&, const faceLexemeType&);

  void
  operator<< (::xercesc::DOMElement&, const syncBlock&);

  void
  operator<< (::xercesc::DOMElement&, const targetID&);

  void
  operator<< (::xercesc::DOMAttr&, const targetID&);

  void
  operator<< (::xml_schema::list_stream&,
              const targetID&);

  void
  operator<< (::xercesc::DOMElement&, const id&);

  void
  operator<< (::xercesc::DOMAttr&, const id&);

  void
  operator<< (::xml_schema::list_stream&,
              const id&);

  void
  operator<< (::xercesc::DOMElement&, const openSetItem&);

  void
  operator<< (::xercesc::DOMAttr&, const openSetItem&);

  void
  operator<< (::xml_schema::list_stream&,
              const openSetItem&);

  void
  operator<< (::xercesc::DOMElement&, const closedSetItem&);

  void
  operator<< (::xercesc::DOMAttr&, const closedSetItem&);

  void
  operator<< (::xml_schema::list_stream&,
              const closedSetItem&);

  void
  operator<< (::xercesc::DOMElement&, const pointingType&);

  void
  operator<< (::xercesc::DOMElement&, const locomotionType&);

  void
  operator<< (::xercesc::DOMElement&, const headDirectionShiftType&);

  void
  operator<< (::xercesc::DOMElement&, const faceFacs&);

  void
  operator<< (::xercesc::DOMElement&, const faceType&);

  void
  operator<< (::xercesc::DOMElement&, const faceShiftType&);

  void
  operator<< (::xercesc::DOMElement&, const lexemeType&);

  void
  operator<< (::xercesc::DOMElement&, const headType&);

  void
  operator<< (::xercesc::DOMElement&, const stanceType&);

  void
  operator<< (::xercesc::DOMElement&, const poseType&);

  void
  operator<< (::xercesc::DOMElement&, const bml&);
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CXX_HOME_NALYD_ROS_WORKSPACE_SBL_BML_CPP_XSD_BML_1_0_H
